pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        GITHUB_CREDENTIALS = credentials('github-token')
        NEXUS_CREDENTIALS = credentials('nexus-credentials')
        NEXUS_URL = 'localhost:8050'
        NEXUS_REPOSITORY = 'repository/docker-hosted'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/SelimRiahi/test-jenk.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('test') {
                        bat 'docker build -t selimrh125/static-api:latest .'
                    }
                }
            }
        }

        stage('Remove Existing Docker Container') {
            steps {
                script {
                    bat 'docker rm -f static-api || echo "No existing container to remove"'
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    bat 'docker run -d -p 3000:3000 --name static-api selimrh125/static-api:latest'
                }
            }
        }

        stage('Tag Docker Image for Nexus') {
            steps {
                script {
                    bat "docker tag selimrh125/static-api:latest ${NEXUS_URL}/${NEXUS_REPOSITORY}/static-api:latest"
                }
            }
        }

        stage('Push Docker Image to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                        bat "echo ${NEXUS_PASSWORD} | docker login -u ${NEXUS_USERNAME} --password-stdin ${NEXUS_URL}"
                        bat "docker push ${NEXUS_URL}/${NEXUS_REPOSITORY}/static-api:latest"
                    }
                }
            }
        }
    }
}
